#!/usr/bin/env python3
#
# bind usage guide:
#
#   [-h|--help]                 print this message
#   [-b|--build] <proj_name>    build some prettiness
#
#   [-p|--pdf]                  compile sources for pdf
#   [-w|--web]                  compile sources for html
#   [-l|--linguifex]            compile sources for linguifex wiki
#
#   [-g|--guide] <path/to/file> path to tex main conf file [./guide.yaml]
#   [-c|--chapters]  <dir>      directory to chapters [default "./"]
#   [-t|--tables]    <dir>      directory for tables
#   [-i|--images]    <dir>      directory for images
#   [-e|--extra]     <dir>      directory for extra tex
#   [-a|--artifacts] <dir>      directory to store build artifacts
#   [-o|--outdir]    <dir>      directory to store final products in
#
# Authors: John Burke
# Date:    3 March 2021   
#

import os, sys, argparse
from yaml2tex import *
from replace  import *

########################################
##                                    ##
## Terminal Management                ##
##                                    ##
########################################
class parser_with_error(argparse.ArgumentParser):
  def error(self, message = ""):
    if(message):
      print("Error: %s" % message)
    source = open(sys.argv[0]) # open localize.py
    for(line_no, line) in enumerate(source):
      if(line[0] != "#"): sys.exit() # exit on 1st noncomment line
      if(line_no > 0):    print(line[1:].rstrip("\n"))

def parse():
  parser = parser_with_error(add_help = False)

  # mode arguments for the script

  mode = parser.add_mutually_exclusive_group(required = True)

  mode.add_argument("-h", "--help",  action  = "store_true")
  mode.add_argument("-b", "--build", type = str, default = "language")

  # build targets

  parser.add_argument("-p", "--pdf",       action = "store_true")
  parser.add_argument("-w", "--web",       action = "store_true")
  parser.add_argument("-l", "--linguifex", action = "store_true")

  # source directories

  parser.add_argument("-g", "--guide",    type = str)
  parser.add_argument("-c", "--chapters", type = str)
  parser.add_argument("-t", "--tables",   type = str)
  parser.add_argument("-i", "--images",   type = str)
  parser.add_argument("-e", "--extra",    type = str)

  parser.add_argument("-a", "--artifacts", type = str)
  parser.add_argument("-o", "--outdir",    type = str)

  # package it up

  options = parser.parse_args()

  if options.help:
    parser.error()
  else:
    return options

########################################
##                                    ##
##  Main                              ##
##                                    ##
########################################
def main():
  options = parse()

  # directory assertions
  assert os.path.isfile(options.guide),   "guide file not found"
  assert os.path.isdir(options.chapters), "chapters dir not found"
  assert os.path.isdir(options.tables),   "tables dir not found"
  assert os.path.isdir(options.images),   "images dir not found"
  assert os.path.isdir(options.extra),    "extra dir not found"

  assert type(options.artifacts) is not None, "artifacts dir not specified"
  assert type(options.outdir)    is not None, "outdir not specified"

  if not os.path.isdir(options.artifacts):
    os.mkdir(options.artifacts)

  if not os.path.isdir(options.outdir):
    os.mkdir(options.outdir)

  # tables_gen(options.tables, options.artifacts)
  # top_tex = tex_gen(options.guide, options.chapters, options.artifacts)
  # text_replace(options.artifacts, options.replace)
  # final_build(final_docs, top_tex, options.outdir, options.artifacts)

main()  
